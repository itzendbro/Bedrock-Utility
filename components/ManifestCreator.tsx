import React, { useState, useEffect, useCallback } from 'react';
import { GeneratedFile } from '../types';
import { useNotification } from '../contexts/NotificationContext';
import SyntaxHighlighter from './SyntaxHighlighter';
import JSZip from 'jszip';

type ManifestMode = 'rp' | 'bp' | 'skin' | 'linked';

const MINECRAFT_VERSIONS = [
    "1.21.114", "1.21.10", "1.21.0", "1.20.80", "1.20.70", "1.20.60", "1.20.50", "1.20.40", "1.20.30"
];

const SCRIPT_MODULE_VERSIONS = {
    server: ["1.12.0-beta", "1.11.0-beta", "1.10.0-beta"],
    serverUi: ["1.2.0-beta", "1.1.0-beta", "1.0.0-beta"],
};

const CAPABILITIES: string[] = ["chemistry", "script_eval", "ray_tracing"];

// --- Reusable Components ---
const InputField: React.FC<{ as?: 'input' | 'textarea'; type?: string, label: string; value: string | number; onChange: (e: React.ChangeEvent<HTMLInputElement | HTMLTextAreaElement>) => void; placeholder?: string; info?: string; rows?: number, disabled?: boolean }> = 
({ as = 'input', type = 'text', label, value, onChange, placeholder, info, rows, disabled }) => {
    const commonProps = {
        value,
        onChange,
        placeholder,
        disabled,
        className: "w-full bg-[var(--bg-input)] border border-[var(--border-primary)] rounded-lg p-2.5 text-sm disabled:opacity-50",
    };
    return (
        <div className="flex-grow">
            <label className="block text-sm font-medium text-[var(--text-secondary)] mb-2">{label}</label>
            {as === 'textarea' ? (
                <textarea {...commonProps} rows={rows} />
            ) : (
                <input type={type} {...commonProps} />
            )}
            {info && <p className="mt-1 text-xs text-[var(--text-tertiary)]">{info}</p>}
        </div>
    );
};

const Section: React.FC<{ title: string; children: React.ReactNode }> = ({ title, children }) => (
    <div className="flex flex-col gap-4 p-4 border border-[var(--border-primary)] rounded-lg bg-[var(--bg-app)]">
        <h3 className="font-bold text-md border-b border-[var(--border-primary)] pb-2">{title}</h3>
        {children}
    </div>
);

const ModeCard: React.FC<{ icon: string, title: string, description: string, onClick: () => void }> = ({ icon, title, description, onClick }) => (
    <button onClick={onClick} className="group bg-[var(--bg-app)] p-6 rounded-xl border border-[var(--border-primary)] hover:border-[var(--accent-primary)] transition-colors text-left h-full flex flex-col">
        <div className="text-3xl mb-3">{icon}</div>
        <h4 className="font-bold text-lg text-[var(--text-primary)] group-hover:text-[var(--accent-primary)] transition-colors">{title}</h4>
        <p className="text-sm text-[var(--text-secondary)] mt-1 flex-grow">{description}</p>
    </button>
);


const ManifestCreator: React.FC = () => {
    const [manifestMode, setManifestMode] = useState<ManifestMode | null>(null);
    
    const [packName, setPackName] = useState('My Awesome Pack');
    const [packDescription, setPackDescription] = useState('A pack generated by Bedrock Utility.');
    const [packVersion, setPackVersion] = useState({ major: 1, minor: 0, patch: 0 });
    const [minEngineVersion, setMinEngineVersion] = useState(MINECRAFT_VERSIONS[0]);
    
    const [rpHeaderUuid, setRpHeaderUuid] = useState('');
    const [rpModuleUuid, setRpModuleUuid] = useState('');
    const [bpHeaderUuid, setBpHeaderUuid] = useState('');
    const [bpModuleUuid, setBpModuleUuid] = useState('');
    
    const [capabilities, setCapabilities] = useState<string[]>([]);
    const [dependencies, setDependencies] = useState<{ id: string, uuid: string, version: string }[]>([]);
    
    const [enableScripting, setEnableScripting] = useState(false);
    const [useServer, setUseServer] = useState(true);
    const [serverVersion, setServerVersion] = useState(SCRIPT_MODULE_VERSIONS.server[0]);
    const [useServerUi, setUseServerUi] = useState(false);
    const [serverUiVersion, setServerUiVersion] = useState(SCRIPT_MODULE_VERSIONS.serverUi[0]);
    
    const [authors, setAuthors] = useState<string[]>(['Bedrock Utility', 'Shadid234']);
    const [url, setUrl] = useState('www.bedrock-utility.com');

    const [previewFiles, setPreviewFiles] = useState<GeneratedFile[]>([]);
    const [activePreview, setActivePreview] = useState<string | null>(null);

    const { addNotification } = useNotification();
    const [copiedUuid, setCopiedUuid] = useState<string | null>(null);

    const regenerateUuids = useCallback(() => {
        setRpHeaderUuid(crypto.randomUUID());
        setRpModuleUuid(crypto.randomUUID());
        setBpHeaderUuid(crypto.randomUUID());
        setBpModuleUuid(crypto.randomUUID());
    }, []);

    useEffect(() => {
        regenerateUuids();
    }, [regenerateUuids]);
    
    const handleCapabilityChange = (capability: string, checked: boolean) => {
        setCapabilities(prev => 
            checked ? [...new Set([...prev, capability])] : prev.filter(c => c !== capability)
        );
    };

    const handleDependencyChange = (id: string, field: 'uuid' | 'version', value: string) => {
        setDependencies(deps => deps.map(d => d.id === id ? {...d, [field]: value} : d));
    };
    const addDependency = () => setDependencies(deps => [...deps, {id: `dep-${Date.now()}`, uuid: '', version: '1.0.0'}]);
    const removeDependency = (id: string) => setDependencies(deps => deps.filter(d => d.id !== id));
    
    useEffect(() => {
        handleCapabilityChange('script_eval', enableScripting);
    }, [enableScripting]);

    const handleAuthorChange = (index: number, value: string) => {
        setAuthors(prev => prev.map((a, i) => i === index ? value : a));
    };
    const addAuthor = () => setAuthors(prev => [...prev, '']);
    const removeAuthor = (index: number) => {
        if (authors.length > 1) {
            setAuthors(prev => prev.filter((_, i) => i !== index));
        }
    };

    const parseVersion = (versionStr: string | number) => {
        if (typeof versionStr === 'number') return versionStr;
        const part = parseInt(versionStr, 10);
        return isNaN(part) ? 0 : part;
    };

    const handleCopyUuid = (uuidName: string, value: string) => {
        navigator.clipboard.writeText(value);
        setCopiedUuid(uuidName);
        addNotification('info', `${uuidName} UUID copied to clipboard!`);
        setTimeout(() => setCopiedUuid(null), 2000);
    };

    useEffect(() => {
        if (!manifestMode) return;
        
        const versionArray = [packVersion.major, packVersion.minor, packVersion.patch];
        const minEngineVersionArray = minEngineVersion.split('.').map(s => parseInt(s));
        const newPreviewFiles: GeneratedFile[] = [];

        const createManifest = (type: 'resources' | 'data' | 'skin_pack', headerUuid: string, moduleUuid: string, customName?: string) => {
            const manifest: any = {
                format_version: 2,
                header: {
                    name: customName || packName,
                    description: packDescription,
                    uuid: headerUuid,
                    version: versionArray,
                    min_engine_version: minEngineVersionArray,
                },
                modules: [{ type, uuid: moduleUuid, version: versionArray }],
            };

            const finalAuthors = authors.map(a => a.trim()).filter(Boolean);
            const finalUrl = url.trim();

            if (finalAuthors.length > 0 || finalUrl) {
                const metadata: { authors?: string[]; url?: string } = {};
                if (finalAuthors.length > 0) metadata.authors = finalAuthors;
                if (finalUrl) metadata.url = finalUrl;
                manifest.metadata = metadata;
            }

            return manifest;
        };

        switch(manifestMode) {
            case 'rp': {
                const manifest = createManifest('resources', rpHeaderUuid, rpModuleUuid);
                newPreviewFiles.push({ path: 'manifest.json', content: JSON.stringify(manifest, null, 2) });
                break;
            }
            case 'bp': {
                const manifest = createManifest('data', bpHeaderUuid, bpModuleUuid);
                // FIX: Separated dependency arrays to handle different version types (number[] vs string) and avoid TypeScript inference errors.
                const customDependencies = dependencies.filter(d => d.uuid && d.version).map(d => ({ uuid: d.uuid, version: d.version.split('.').map(s => parseInt(s, 10)) }));
                
                const scriptDependencies: { module_name: string, version: string }[] = [];
                if (enableScripting) {
                    if (useServer) scriptDependencies.push({ module_name: "@minecraft/server", version: serverVersion });
                    if (useServerUi) scriptDependencies.push({ module_name: "@minecraft/server-ui", version: serverUiVersion });
                }

                const allDependencies = [...customDependencies, ...scriptDependencies];
                
                if (allDependencies.length > 0) manifest.dependencies = allDependencies;
                if (capabilities.length > 0) manifest.capabilities = capabilities;
                newPreviewFiles.push({ path: 'manifest.json', content: JSON.stringify(manifest, null, 2) });
                break;
            }
            case 'skin': {
                const manifest = createManifest('skin_pack', rpHeaderUuid, rpModuleUuid);
                newPreviewFiles.push({ path: 'manifest.json', content: JSON.stringify(manifest, null, 2) });
                break;
            }
            case 'linked': {
                const rpManifest = createManifest('resources', rpHeaderUuid, rpModuleUuid);
                const bpManifest = createManifest('data', bpHeaderUuid, bpModuleUuid);
                
                const customDependencies = dependencies.filter(d => d.uuid && d.version).map(d => ({ uuid: d.uuid, version: d.version.split('.').map(s => parseInt(s, 10)) }));
                const scriptDependencies = [];
                if (enableScripting) {
                    if (useServer) scriptDependencies.push({ module_name: "@minecraft/server", version: serverVersion });
                    if (useServerUi) scriptDependencies.push({ module_name: "@minecraft/server-ui", version: serverUiVersion });
                }
        
                const allBpDependencies = [
                    { uuid: rpModuleUuid, version: versionArray }, // The automatic link to the RP
                    ...customDependencies,
                    ...scriptDependencies
                ];
                
                if (allBpDependencies.length > 0) {
                    bpManifest.dependencies = allBpDependencies;
                }
        
                if (capabilities.length > 0) {
                    bpManifest.capabilities = capabilities;
                }

                newPreviewFiles.push({ path: 'resource_pack/manifest.json', content: JSON.stringify(rpManifest, null, 2) });
                newPreviewFiles.push({ path: 'behavior_pack/manifest.json', content: JSON.stringify(bpManifest, null, 2) });
                break;
            }
        }
        setPreviewFiles(newPreviewFiles);
        if (!activePreview || !newPreviewFiles.find(f => f.path === activePreview)) {
            setActivePreview(newPreviewFiles[0]?.path || null);
        }
    }, [manifestMode, packName, packDescription, packVersion, minEngineVersion, rpHeaderUuid, rpModuleUuid, bpHeaderUuid, bpModuleUuid, capabilities, dependencies, enableScripting, useServer, serverVersion, useServerUi, serverUiVersion, authors, url, activePreview]);

    const handleDownload = async () => {
        if (previewFiles.length === 0) {
            addNotification('error', 'No file to download.');
            return;
        }

        try {
            if (previewFiles.length === 1) {
                const file = previewFiles[0];
                const fileName = file.path.split('/').pop() || 'manifest.json';
                const blob = new Blob([file.content], { type: 'application/json' });
                const link = document.createElement('a');
                link.href = URL.createObjectURL(blob);
                link.download = fileName;
                document.body.appendChild(link);
                link.click();
                document.body.removeChild(link);
                addNotification('success', `${fileName} downloaded!`);
            } else {
                const zip = new JSZip();
                previewFiles.forEach(file => {
                    zip.file(file.path, file.content);
                });
                const zipName = `${packName.replace(/[^a-zA-Z0-9_ -]/g, '_') || 'pack'}.zip`;
                const content = await zip.generateAsync({ type: 'blob' });
                const link = document.createElement('a');
                link.href = URL.createObjectURL(content);
                link.download = zipName;
                document.body.appendChild(link);
                link.click();
                document.body.removeChild(link);
                addNotification('success', `${zipName} downloaded!`);
            }
        } catch (err) {
            addNotification('error', 'Failed to prepare download.');
            console.error(err);
        }
    };
    
    const activeFileContent = previewFiles.find(f => f.path === activePreview)?.content || '';

    const handleCopyCode = () => {
        if (!activeFileContent) return;
        navigator.clipboard.writeText(activeFileContent);
        addNotification('info', 'Code copied to clipboard!');
    };

    if (!manifestMode) {
        return (
            <div className="flex flex-col gap-6">
                <div className="text-center">
                    <h2 className="text-xl font-bold">Select Manifest Type</h2>
                    <p className="text-sm text-[var(--text-secondary)] mt-1">Choose which type of pack manifest(s) you want to generate.</p>
                </div>
                <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                    <ModeCard icon="🎨" title="Resource Pack" description="For textures, models, sounds, and UI. Creates one manifest.json." onClick={() => setManifestMode('rp')} />
                    <ModeCard icon="🧱" title="Behavior Pack" description="For entities, items, and scripts. Creates one manifest.json." onClick={() => setManifestMode('bp')} />
                    <ModeCard icon="👤" title="Skin Pack" description="For custom player skins. Creates manifest.json." onClick={() => setManifestMode('skin')} />
                    <ModeCard icon="🔗" title="Resource and Behaviour pack (dependency)" description="Creates both a resource and behavior pack, automatically linked together." onClick={() => setManifestMode('linked')} />
                </div>
            </div>
        );
    }
    
    const showBehaviorOptions = manifestMode === 'bp' || manifestMode === 'linked';

    return (
        <div className="flex flex-col gap-6">
             <button onClick={() => setManifestMode(null)} className="text-sm text-[var(--accent-primary)] hover:underline self-start">{'<'} Change Pack Type</button>
            <div className="grid grid-cols-1 lg:grid-cols-2 gap-6">
                <div className="flex flex-col gap-4">
                    <Section title="General Information">
                        <InputField label="Pack Name" value={packName} onChange={e => setPackName(e.target.value)} placeholder="My Awesome Pack" />
                        <InputField as="textarea" rows={3} label="Pack Description" value={packDescription} onChange={e => setPackDescription(e.target.value)} placeholder="A pack generated by Bedrock Utility." />
                        <div>
                            <label className="block text-sm font-medium text-[var(--text-secondary)] mb-2">Pack Version</label>
                            <div className="flex items-center gap-2">
                                <input type="number" value={packVersion.major} onChange={e => setPackVersion(v => ({...v, major: parseVersion(e.target.value)}))} className="w-full bg-[var(--bg-input)] border border-[var(--border-primary)] rounded-lg p-2.5 text-sm" />
                                <span className="font-bold">.</span>
                                <input type="number" value={packVersion.minor} onChange={e => setPackVersion(v => ({...v, minor: parseVersion(e.target.value)}))} className="w-full bg-[var(--bg-input)] border border-[var(--border-primary)] rounded-lg p-2.5 text-sm" />
                                <span className="font-bold">.</span>
                                <input type="number" value={packVersion.patch} onChange={e => setPackVersion(v => ({...v, patch: parseVersion(e.target.value)}))} className="w-full bg-[var(--bg-input)] border border-[var(--border-primary)] rounded-lg p-2.5 text-sm" />
                            </div>
                        </div>
                        <label className="block text-sm font-medium text-[var(--text-secondary)] -mb-2">Minimum Game Version</label>
                        <select value={minEngineVersion} onChange={e => setMinEngineVersion(e.target.value)} className="w-full bg-[var(--bg-input)] border border-[var(--border-primary)] rounded-lg p-2.5 text-sm">
                            {MINECRAFT_VERSIONS.map(v => <option key={v} value={v}>{v}</option>)}
                        </select>
                    </Section>

                    <Section title="Metadata">
                        <div className="flex flex-col gap-4">
                            <div>
                                <label className="block text-sm font-medium text-[var(--text-secondary)] mb-2">Authors</label>
                                <div className="flex flex-col gap-2">
                                    {authors.map((author, index) => (
                                        <div key={index} className="flex items-center gap-2">
                                            <input 
                                                type="text"
                                                value={author}
                                                onChange={(e) => handleAuthorChange(index, e.target.value)}
                                                placeholder="Author Name"
                                                className="w-full bg-[var(--bg-input)] border border-[var(--border-primary)] rounded-lg p-2.5 text-sm"
                                            />
                                            <button onClick={() => removeAuthor(index)} className="p-2.5 rounded-lg bg-[var(--bg-input)] border border-[var(--border-primary)] text-red-500 hover:bg-[var(--bg-hover)] disabled:opacity-50 disabled:cursor-not-allowed" disabled={authors.length <= 1 && author === ''}>
                                                <svg xmlns="http://www.w3.org/2000/svg" className="h-5 w-5" viewBox="0 0 20 20" fill="currentColor"><path fillRule="evenodd" d="M5 10a1 1 0 011-1h8a1 1 0 110 2H6a1 1 0 01-1-1z" clipRule="evenodd" /></svg>
                                            </button>
                                        </div>
                                    ))}
                                </div>
                                <button onClick={addAuthor} className="text-sm text-[var(--accent-primary)] hover:underline mt-2 text-left">+ Add Author</button>
                            </div>
                            <InputField label="Website URL" value={url} onChange={e => setUrl(e.target.value)} placeholder="https://example.com" />
                        </div>
                    </Section>

                    <Section title="UUIDs">
                        <div className="flex justify-end -mt-2 mb-2">
                            <button onClick={regenerateUuids} className="p-2.5 rounded-lg bg-[var(--bg-input)] border border-[var(--border-primary)] hover:bg-[var(--bg-hover)]" title="Regenerate All UUIDs"><span className="text-xl">🔗</span></button>
                        </div>
                        {(manifestMode === 'rp' || manifestMode === 'skin' || manifestMode === 'linked') && <>
                            <div className="flex items-end gap-2"><InputField label="Resource Pack Header UUID" value={rpHeaderUuid} onChange={() => {}} disabled /><button onClick={() => handleCopyUuid('RP Header', rpHeaderUuid)} className="p-2.5 rounded-lg bg-[var(--bg-input)] border border-[var(--border-primary)] hover:bg-[var(--bg-hover)]" title="Copy">{copiedUuid === 'RP Header' ? '✅' : '📋'}</button></div>
                            <div className="flex items-end gap-2"><InputField label="Resource Pack Module UUID" value={rpModuleUuid} onChange={() => {}} disabled /><button onClick={() => handleCopyUuid('RP Module', rpModuleUuid)} className="p-2.5 rounded-lg bg-[var(--bg-input)] border border-[var(--border-primary)] hover:bg-[var(--bg-hover)]" title="Copy">{copiedUuid === 'RP Module' ? '✅' : '📋'}</button></div>
                        </>}
                        {(manifestMode === 'bp' || manifestMode === 'linked') && <>
                            <div className="flex items-end gap-2"><InputField label="Behavior Pack Header UUID" value={bpHeaderUuid} onChange={() => {}} disabled /><button onClick={() => handleCopyUuid('BP Header', bpHeaderUuid)} className="p-2.5 rounded-lg bg-[var(--bg-input)] border border-[var(--border-primary)] hover:bg-[var(--bg-hover)]" title="Copy">{copiedUuid === 'BP Header' ? '✅' : '📋'}</button></div>
                            <div className="flex items-end gap-2"><InputField label="Behavior Pack Module UUID" value={bpModuleUuid} onChange={() => {}} disabled /><button onClick={() => handleCopyUuid('BP Module', bpModuleUuid)} className="p-2.5 rounded-lg bg-[var(--bg-input)] border border-[var(--border-primary)] hover:bg-[var(--bg-hover)]" title="Copy">{copiedUuid === 'BP Module' ? '✅' : '📋'}</button></div>
                        </>}
                    </Section>

                    {showBehaviorOptions && <>
                        <Section title="Capabilities">
                            <div className="flex gap-4">
                                {CAPABILITIES.map(cap => (<div key={cap} className="flex items-center gap-2"><input type="checkbox" id={`cap-${cap}`} checked={capabilities.includes(cap)} onChange={e => handleCapabilityChange(cap, e.target.checked)} disabled={cap === 'script_eval' && enableScripting} className="w-4 h-4" /><label htmlFor={`cap-${cap}`} className="text-sm">{cap}</label></div>))}
                            </div>
                        </Section>
                        <Section title="Dependencies">
                            <div className="flex flex-col gap-2">{dependencies.map((dep) => (<div key={dep.id} className="flex items-end gap-2"><InputField label="UUID" value={dep.uuid} onChange={e => handleDependencyChange(dep.id, 'uuid', e.target.value)} placeholder="Dependency Pack UUID" /><InputField label="Version" value={dep.version} onChange={e => handleDependencyChange(dep.id, 'version', e.target.value)} placeholder="1.0.0" /><button onClick={() => removeDependency(dep.id)} className="p-2.5 mb-px rounded-lg bg-[var(--bg-input)] border border-[var(--border-primary)] text-red-500 hover:bg-[var(--bg-hover)]"><svg xmlns="http://www.w3.org/2000/svg" className="h-5 w-5" viewBox="0 0 20 20" fill="currentColor"><path fillRule="evenodd" d="M9 2a1 1 0 00-.894.553L7.382 4H4a1 1 0 000 2v10a2 2 0 002 2h8a2 2 0 002-2V6a1 1 0 100-2h-3.382l-.724-1.447A1 1 0 0011 2H9zM7 8a1 1 0 012 0v6a1 1 0 11-2 0V8zm5-1a1 1 0 00-1 1v6a1 1 0 102 0V8a1 1 0 00-1-1z" clipRule="evenodd" /></svg></button></div>))}</div>
                            <button onClick={addDependency} className="text-sm text-[var(--accent-primary)] hover:underline">+ Add Dependency</button>
                        </Section>
                        <Section title="Scripting">
                            <div className="flex flex-col gap-4">
                                <div className="flex items-center gap-2"><input type="checkbox" id="enable-scripting" checked={enableScripting} onChange={e => setEnableScripting(e.target.checked)} className="w-4 h-4" /><label htmlFor="enable-scripting" className="text-sm font-semibold">Enable Scripting API Modules</label></div>
                                {enableScripting && (<div className="flex flex-col gap-4 pl-4 border-l-2 border-[var(--border-primary)]">
                                    <div className="flex items-center gap-2"><input type="checkbox" id="use-server" checked={useServer} onChange={e => setUseServer(e.target.checked)} className="w-4 h-4" /><label htmlFor="use-server" className="text-sm flex-grow">@minecraft/server</label><select value={serverVersion} onChange={e => setServerVersion(e.target.value)} disabled={!useServer} className="bg-[var(--bg-input)] border border-[var(--border-primary)] rounded-lg p-1 text-xs w-32">{SCRIPT_MODULE_VERSIONS.server.map(v => <option key={v} value={v}>{v}</option>)}</select></div>
                                    <div className="flex items-center gap-2"><input type="checkbox" id="use-server-ui" checked={useServerUi} onChange={e => setUseServerUi(e.target.checked)} className="w-4 h-4" /><label htmlFor="use-server-ui" className="text-sm flex-grow">@minecraft/server-ui</label><select value={serverUiVersion} onChange={e => setServerUiVersion(e.target.value)} disabled={!useServerUi} className="bg-[var(--bg-input)] border border-[var(--border-primary)] rounded-lg p-1 text-xs w-32">{SCRIPT_MODULE_VERSIONS.serverUi.map(v => <option key={v} value={v}>{v}</option>)}</select></div>
                                </div>)}
                            </div>
                        </Section>
                    </>}
                </div>

                <div className="flex flex-col">
                    <h3 className="text-lg font-bold mb-2">Live Preview</h3>
                    <div className="bg-[var(--bg-panel)] p-4 rounded-xl border border-[var(--border-primary)] flex-grow flex flex-col min-h-[400px]">
                        <div className="flex justify-between items-center border-b border-[var(--border-primary)] mb-2 flex-shrink-0">
                            <div className="flex">
                                {previewFiles.map(file => (
                                    <button key={file.path} onClick={() => setActivePreview(file.path)} className={`px-3 py-2 text-sm border-b-2 ${activePreview === file.path ? 'border-[var(--accent-primary)] text-[var(--text-primary)]' : 'border-transparent text-[var(--text-secondary)] hover:text-[var(--text-primary)]'}`}>
                                        {file.path.split('/').pop()}
                                    </button>
                                ))}
                            </div>
                            <button onClick={handleCopyCode} title="Copy Code" className="px-3 py-2 text-sm font-semibold rounded-lg bg-[var(--bg-input)] hover:bg-[var(--bg-hover)] flex items-center gap-2">
                                <svg xmlns="http://www.w3.org/2000/svg" className="h-4 w-4" fill="none" viewBox="0 0 24 24" stroke="currentColor"><path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M8 16H6a2 2 0 01-2-2V6a2 2 0 012-2h8a2 2 0 012 2v2m-6 12h8a2 2 0 002-2v-8a2 2 0 00-2-2h-8a2 2 0 00-2 2v8a2 2 0 002 2z" /></svg>
                                Copy
                            </button>
                        </div>
                        <div className="relative flex-grow overflow-auto bg-[var(--editor-bg)] rounded-lg">
                            <pre className="text-xs font-mono p-4">
                                <SyntaxHighlighter code={activeFileContent} language="json" />
                            </pre>
                        </div>
                    </div>
                </div>
            </div>
            
            <button onClick={handleDownload} className="w-full mt-4 flex justify-center items-center px-6 py-3 font-semibold rounded-lg text-white bg-[var(--accent-green)] hover:bg-[var(--accent-green-hover)]">
                {previewFiles.length > 1 ? 'Download .zip' : `Download ${previewFiles[0]?.path.split('/').pop() || 'File'}`}
            </button>
        </div>
    );
};

export default ManifestCreator;