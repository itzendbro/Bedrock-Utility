import React, { useState } from 'react';
import { useNotification } from '../contexts/NotificationContext';
import { generateTexture, refineTexture } from '../services/geminiService';
import JSZip from 'jszip';

type GeneratedImage = {
    id: string;
    name: string;
    base64: string;
};

const Spinner: React.FC<{text: string}> = ({text}) => (
    <div className="flex items-center">
        <svg className="animate-spin -ml-1 mr-3 h-5 w-5" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24">
            <circle className="opacity-25" cx="12" cy="12" r="10" stroke="currentColor" strokeWidth="4"></circle>
            <path className="opacity-75" fill="currentColor" d="M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z"></path>
        </svg>
        {text}
    </div>
);

const TextureGenerator: React.FC = () => {
    const [prompt, setPrompt] = useState('');
    const [style, setStyle] = useState('vanilla');
    const [resolution, setResolution] = useState('16x16');
    const [refinePrompt, setRefinePrompt] = useState('');
    const [generatedImages, setGeneratedImages] = useState<GeneratedImage[]>([]);
    const [selectedImageId, setSelectedImageId] = useState<string | null>(null);
    const [isLoading, setIsLoading] = useState(false);
    const [isRefining, setIsRefining] = useState(false);
    const { addNotification } = useNotification();

    const selectedImage = generatedImages.find(img => img.id === selectedImageId);

    const handleGenerate = async () => {
        if (!prompt.trim()) {
            addNotification('error', 'Please enter a description for the texture.');
            return;
        }
        setIsLoading(true);
        try {
            const base64 = await generateTexture(prompt, style, resolution);
            const newImage: GeneratedImage = {
                id: `tex-${Date.now()}`,
                name: prompt.split(' ').slice(0, 3).join('_').toLowerCase().replace(/[^a-z0-9_]/g, ''),
                base64,
            };
            setGeneratedImages(prev => [newImage, ...prev]);
            setSelectedImageId(newImage.id);
            addNotification('success', 'Texture generated successfully!');
        } catch (err) {
            addNotification('error', (err as Error).message);
        } finally {
            setIsLoading(false);
        }
    };
    
    const handleRefine = async () => {
        if (!refinePrompt.trim() || !selectedImage) {
            addNotification('error', 'Please select an image and describe your refinement.');
            return;
        }
        setIsRefining(true);
        try {
            const base64 = await refineTexture(selectedImage.base64, refinePrompt);
            const newImage: GeneratedImage = {
                id: `tex-${Date.now()}`,
                name: `${selectedImage.name}_refined`,
                base64,
            };
            setGeneratedImages(prev => [newImage, ...prev]);
            setSelectedImageId(newImage.id);
            setRefinePrompt('');
            addNotification('success', 'Texture refined successfully!');
        } catch(err) {
            addNotification('error', (err as Error).message);
        } finally {
            setIsRefining(false);
        }
    }

    const handleDownload = (image: GeneratedImage) => {
        const link = document.createElement('a');
        link.href = `data:image/png;base64,${image.base64}`;
        link.download = `${image.name}.png`;
        link.click();
    };

    const handleDelete = (id: string) => {
        setGeneratedImages(prev => prev.filter(img => img.id !== id));
        if (selectedImageId === id) {
            setSelectedImageId(null);
        }
    };
    
    const handleExportPack = async () => {
        if (generatedImages.length === 0) {
            addNotification('error', 'Generate at least one texture to export.');
            return;
        }
        const zip = new JSZip();
        const rp = zip.folder('resource_pack');
        const textures = rp.folder('textures');
        const items = textures.folder('items');

        const itemTextureJson: { resource_pack_name: string; texture_data: any } = {
            resource_pack_name: "vanilla",
            texture_data: {}
        };

        for (const image of generatedImages) {
            items.file(`${image.name}.png`, image.base64, { base64: true });
            itemTextureJson.texture_data[image.name] = {
                textures: `textures/items/${image.name}`
            };
        }

        rp.file('item_texture.json', JSON.stringify(itemTextureJson));
        rp.file('manifest.json', JSON.stringify({
            format_version: 2,
            header: {
                name: "AI Generated Textures",
                description: "A resource pack generated by Bedrock Utility's AI.",
                uuid: crypto.randomUUID(),
                version: [1, 0, 0],
                min_engine_version: [1, 21, 114]
            },
            modules: [{ type: "resources", uuid: crypto.randomUUID(), version: [1, 0, 0] }]
        }));

        const content = await zip.generateAsync({ type: 'blob' });
        const link = document.createElement('a');
        link.href = URL.createObjectURL(content);
        link.download = `AITexturePack.mcaddon`;
        link.click();
        addNotification('success', 'Resource pack downloaded!');
    };

    return (
        <div className="flex flex-col lg:flex-row flex-grow gap-6 p-6 overflow-hidden h-full">
            {/* Controls */}
            <div className="w-full lg:w-96 flex-shrink-0 flex flex-col gap-4 bg-[var(--bg-panel)] p-4 rounded-xl border border-[var(--border-primary)] overflow-y-auto">
                <h3 className="text-lg font-bold">Texture Generator</h3>
                <div className="flex flex-col gap-4">
                    <div>
                        <label className="block text-sm font-medium text-[var(--text-secondary)] mb-1">Description</label>
                        <textarea value={prompt} onChange={e => setPrompt(e.target.value)} placeholder="A glowing obsidian sword with cyan runes" rows={4} className="w-full bg-[var(--bg-input)] border border-[var(--border-primary)] rounded-lg p-2 text-sm" />
                    </div>
                    <div>
                        <label className="block text-sm font-medium text-[var(--text-secondary)] mb-1">Style</label>
                        <select value={style} onChange={e => setStyle(e.target.value)} className="w-full bg-[var(--bg-input)] border border-[var(--border-primary)] rounded-lg p-2 text-sm">
                            <option value="vanilla">Vanilla</option>
                            <option value="fantasy">Fantasy</option>
                            <option value="realistic">Realistic</option>
                            <option value="cartoon">Cartoon</option>
                            <option value="sci-fi">Sci-Fi</option>
                        </select>
                    </div>
                    <div>
                        <label className="block text-sm font-medium text-[var(--text-secondary)] mb-1">Resolution</label>
                        <div className="flex gap-2">
                            {['16x16', '32x32', '64x64'].map(res => (
                                <button key={res} onClick={() => setResolution(res)} className={`w-full py-2 text-sm font-semibold rounded-md transition-colors ${resolution === res ? 'bg-[var(--bg-active)] text-[var(--text-primary)]' : 'bg-[var(--bg-input)] text-[var(--text-secondary)] hover:bg-[var(--bg-hover)]'}`}>{res}</button>
                            ))}
                        </div>
                    </div>
                    <button onClick={handleGenerate} disabled={isLoading} className="w-full flex justify-center items-center px-4 py-2.5 font-semibold rounded-lg text-white bg-[var(--accent-primary)] hover:bg-[var(--accent-hover)] disabled:bg-[var(--bg-active)]">
                        {isLoading ? <Spinner text="Generating..." /> : 'Generate'}
                    </button>
                </div>

                {selectedImage && (
                    <div className="border-t border-[var(--border-primary)] my-2 pt-4 flex flex-col gap-4">
                        <h3 className="text-lg font-bold">Refine Selected Texture</h3>
                        <div>
                            <label className="block text-sm font-medium text-[var(--text-secondary)] mb-1">Instruction</label>
                            <textarea value={refinePrompt} onChange={e => setRefinePrompt(e.target.value)} placeholder="Make it darker and add some cracks" rows={3} className="w-full bg-[var(--bg-input)] border border-[var(--border-primary)] rounded-lg p-2 text-sm" />
                        </div>
                        <button onClick={handleRefine} disabled={isRefining} className="w-full flex justify-center items-center px-4 py-2.5 font-semibold rounded-lg text-black bg-[var(--accent-yellow)] hover:opacity-80 disabled:bg-[var(--bg-active)]">
                            {isRefining ? <Spinner text="Refining..." /> : 'Refine'}
                        </button>
                    </div>
                )}
            </div>
            {/* Preview */}
            <div className="flex-grow flex items-center justify-center bg-grid-pattern p-4 rounded-xl border border-[var(--border-primary)]">
                {selectedImage ? (
                    <img
                        src={`data:image/png;base64,${selectedImage.base64}`}
                        alt={selectedImage.name}
                        className="max-w-full max-h-full"
                        style={{ imageRendering: 'pixelated', width: 'auto', height: 'auto', maxWidth: '100%', maxHeight: '100%' }}
                    />
                ) : (
                    <div className="text-center text-[var(--text-secondary)]">
                        <p>Your generated texture will be previewed here.</p>
                    </div>
                )}
            </div>
            {/* Gallery */}
            <div className="w-full lg:w-80 flex-shrink-0 flex flex-col gap-4 bg-[var(--bg-panel)] p-4 rounded-xl border border-[var(--border-primary)]">
                <div className="flex justify-between items-center">
                    <h3 className="text-lg font-bold">Gallery ({generatedImages.length})</h3>
                    <button onClick={handleExportPack} disabled={generatedImages.length === 0} className="text-sm font-semibold text-[var(--accent-primary)] hover:underline disabled:opacity-50">Export Pack</button>
                </div>
                <div className="flex-grow overflow-y-auto pr-2 space-y-2">
                    {generatedImages.map(img => (
                        <div key={img.id} className={`p-2 rounded-lg border-2 ${selectedImageId === img.id ? 'border-[var(--accent-primary)] bg-[var(--bg-input)]' : 'border-transparent hover:bg-[var(--bg-hover)]'}`}>
                            <div className="flex items-center gap-2">
                                <img src={`data:image/png;base64,${img.base64}`} alt={img.name} className="w-10 h-10 bg-grid-pattern rounded flex-shrink-0" style={{ imageRendering: 'pixelated' }} />
                                <input type="text" value={img.name} onChange={e => setGeneratedImages(imgs => imgs.map(i => i.id === img.id ? {...i, name: e.target.value} : i))} className="w-full bg-transparent text-sm focus:bg-[var(--bg-app)] rounded px-1 outline-none"/>
                            </div>
                            <div className="flex gap-1 mt-2">
                                <button onClick={() => setSelectedImageId(img.id)} className="w-full text-xs py-1 rounded bg-[var(--bg-panel-secondary)] hover:bg-[var(--bg-active)]">Select</button>
                                <button onClick={() => handleDownload(img)} className="w-full text-xs py-1 rounded bg-[var(--bg-panel-secondary)] hover:bg-[var(--bg-active)]">Download</button>
                                <button onClick={() => handleDelete(img.id)} className="p-1.5 rounded text-red-500 hover:bg-red-500/20 flex-shrink-0"><svg xmlns="http://www.w3.org/2000/svg" className="h-4 w-4" viewBox="0 0 20 20" fill="currentColor"><path fillRule="evenodd" d="M9 2a1 1 0 00-.894.553L7.382 4H4a1 1 0 000 2v10a2 2 0 002 2h8a2 2 0 002-2V6a1 1 0 100-2h-3.382l-.724-1.447A1 1 0 0011 2H9zM7 8a1 1 0 012 0v6a1 1 0 11-2 0V8zm5-1a1 1 0 00-1 1v6a1 1 0 102 0V8a1 1 0 00-1-1z" clipRule="evenodd" /></svg></button>
                            </div>
                        </div>
                    ))}
                </div>
            </div>
        </div>
    );
};

export default TextureGenerator;
